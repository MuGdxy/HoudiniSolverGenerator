/*
Generated By HoudiniSolverGenerator
Author: MuGdxy https://github.com/MuGdxy
*/

#pragma once
#include <SIM/SIM_GeometryCopy.h>
#include <GU/GU_Detail.h>

template <typename HandleType>
HandleType PointAttribute(GU_Detail& gdp, const char* name)
{
    auto attr = gdp.findAttribute(GA_ATTRIB_POINT, name);
    return HandleType(attr);
}

template <typename HandleType>
HandleType VertexAttribute(const GU_Detail& gdp, const char* name)
{
    auto attr = gdp.findAttribute(GA_ATTRIB_VERTEX, name);
    return HandleType(attr);
}

template <typename HandleType>
HandleType PrimitveAttribute(const GU_Detail& gdp, const char* name)
{
    auto attr = gdp.findAttribute(GA_ATTRIB_PRIMITIVE, name);
    return HandleType(attr);
}

template <typename HandleType>
HandleType DetailAttribute(const GU_Detail& gdp, const char* name)
{
    auto attr = gdp.findAttribute(GA_ATTRIB_DETAIL, name);
    return HandleType(attr);
}

template <typename T>
struct AttribMap;

template <>
struct AttribMap<bool>
{
    using type = GA_ROHandleI;
};

template <>
struct AttribMap<int>
{
    using type = GA_ROHandleI;
};

template <>
struct AttribMap<float>
{
    using type = GA_ROHandleF;
};

template <>
struct AttribMap<std::string>
{
    using type = GA_ROHandleS;
};

template <typename T>
using AttribMap_t = typename AttribMap<T>::type;